server {
    listen        443 ssl;
    server_name www.example.com;
    status_zone www.example.com;

    ssl_certificate      /etc/ssl/example.com/server.crt;
    ssl_certificate_key  /etc/ssl/example.com/server.key;
    ssl_client_certificate /etc/ssl/example.com/ca.crt;
    
    # or `on` if you require client key
    # ssl_verify_client optional; 
    ssl_verify_client on;
    
  # intermediate configuration
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;

    ssl_verify_depth 2;

        # Turn of logging here so we only see the logs from the backend:
        # access_log off;

        # Insert Headers
        # Since add_header will append we will Use
        # Headers-more module to override existing headers
        # 
        # # returns subject string of the client certificate
        # more_set_headers 'X-Subject: $ssl_client_s_dn;';
        # # SHA1 fingerprint of the client certificate 
        # more_set_headers 'certsn: $ssl_client_fingerprint';
        # # returns the end date of the client certificate
        # more_set_headers 'CCRT-NotAfter: $ssl_client_v_end';
        # # returns the start date of the client certificate
        # more_set_headers 'CCRT-NotBefore: $ssl_client_v_start';
        # # returns the serial number of the client certificate for an established SSL connection
        # more_set_headers 'CCRT-SN: $ssl_client_serial';
        # # returns the “issuer DN” string of the client certificate 
        # # for an established SSL connection
        # more_set_headers 'CCRT-Issuer: $ssl_client_i_dn';
        # # X-Forwarded-For client request header field with the $remote_addr variable appended to it,
        # # separated by a comma. If the “X-Forwarded-For” field is not present in the client request header,
        # # the $proxy_add_x_forwarded_for variable is equal to the $remote_addr variable.
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # returns subject string of the client certificate
        proxy_set_header X-Subject $ssl_client_s_dn;
        # SHA1 fingerprint of the client certificate 
        proxy_set_header certsn $ssl_client_fingerprint;
        # returns the end date of the client certificate
        proxy_set_header CCRT-NotAfter $ssl_client_v_end;
        # returns the start date of the client certificate
        proxy_set_header CCRT-NotBefore $ssl_client_v_start;
        # returns the serial number of the client certificate for an established SSL connection
        proxy_set_header CCRT-SN $ssl_client_serial;
        # returns the “issuer DN” string of the client certificate 
        # for an established SSL connection
        proxy_set_header CCRT-Issuer $ssl_client_i_dn;
        # X-Forwarded-For client request header field with the $remote_addr variable appended to it,
        # separated by a comma. If the “X-Forwarded-For” field is not present in the client request header,
        # the $proxy_add_x_forwarded_for variable is equal to the $remote_addr variable.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        #  (This is a static header that will always be appended) 
        more_set_headers 'FRONT-END-HTTPS: on';

    location / {
        proxy_pass http://my_backend;
    }

    location /secure {
        proxy_pass http://my_backend;
    }

}